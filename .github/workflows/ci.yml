name: Build and Release

on:
  push:
    branches: [main, master, development]
    paths-ignore:
      - '*.md'
      - 'LICENSE*'
      - '.gitignore'
  pull_request:
    branches: [main, master, development]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag name'
        required: false
        default: ''

jobs:
  # Build native packages (deb, rpm, AppImage, Windows exe)
  build-native:
    name: Build ${{ matrix.os }} ${{ matrix.arch }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-24.04
            arch: x64
            build_cmd: npm run distLinux
          
          # Windows x64 builds
          - os: windows-latest
            arch: x64
            build_cmd: npx electron-builder -w --x64
          
          # Windows x86 builds
          - os: windows-latest
            arch: x86
            build_cmd: npx electron-builder -w --ia32
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install 7zip (Windows)
        if: runner.os == 'Windows'
        run: |
          npm install --save-dev 7zip-bin
        
      - name: Build packages
        run: ${{ matrix.build_cmd }}
        env:
          NODE_ENV: production
          ELECTRON_CACHE: ${{ github.workspace }}/electron
          electron_config_cache: ${{ github.workspace }}/electron
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-packages
          path: |
            dist/*.deb
            dist/*.rpm
            dist/*.AppImage
            dist/*.exe
            dist/*win32*
            dist/*win64*
            dist/*amd64*
            dist/*x64*
            dist/*ia32*
          if-no-files-found: error

  # Build Flatpak packages
  flatpak:
    name: Flatpak ${{ matrix.variant.arch }}
    container:
      image: ghcr.io/flathub-infra/flatpak-github-actions:gnome-47
      options: --privileged
    strategy:
      matrix:
        variant:
          - arch: x86_64
            runner: ubuntu-24.04
          - arch: aarch64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.variant.runner }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate sources for flatpak
        run: |
          wget https://raw.githubusercontent.com/flatpak/flatpak-builder-tools/master/npm/flatpak-npm-generator.py
          python3 flatpak-npm-generator.py package-lock.json --npm3
          cp build/com.alex313031.AppleMusic.yml .
          cp build/com.alex313031.AppleMusic.desktop .
          cp build/com.alex313031.AppleMusic.metainfo.xml .
      
      - uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          bundle: apple-music-${{ matrix.variant.arch }}.flatpak
          manifest-path: com.alex313031.AppleMusic.yml
          cache-key: flatpak-builder-${{ matrix.variant.arch }}-${{ github.sha }}
          arch: ${{ matrix.variant.arch }}

  # Create release
  release:
    name: Create Release
    needs: [build-native, flatpak]
    runs-on: ubuntu-24.04
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release files
        run: |
          mkdir -p release-files
          
          # Move native packages
          find artifacts -type f \( -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.exe" \) | while read file; do
            cp "$file" release-files/
          done
          
          # Move flatpaks
          find artifacts -type f -name "*.flatpak" | while read file; do
            cp "$file" release-files/
          done
          
          ls -la release-files/
      
      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.release_tag || format('v{0}', steps.version.outputs.version) }}
          name: Apple Music Desktop ${{ steps.version.outputs.version }}
          body: |
            ## Apple Music Desktop v${{ steps.version.outputs.version }}
            
            ### Flatpak Installation
            ```bash
            # For x86_64 systems
            flatpak install apple-music-x86_64.flatpak
            
            # For ARM64 devices (PinePhone, etc.)
            flatpak install apple-music-aarch64.flatpak
            ```
            
            ### Changelog
            See [commits](https://github.com/${{ github.repository }}/commits/main) for detailed changes.
          generate_release_notes: true
          files: release-files/*
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' }}